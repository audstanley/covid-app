[{"/home/audstanley/Fall 2020/webCourse/covid/covid-app/src/reportWebVitals.js":"1","/home/audstanley/Fall 2020/webCourse/covid/covid-app/src/App.js":"2","/home/audstanley/Fall 2020/webCourse/covid/covid-app/src/index.js":"3","/home/audstanley/Fall 2020/webCourse/covid/covid-app/src/usStates.js":"4"},{"size":362,"mtime":1606239880738,"results":"5","hashOfConfig":"6"},{"size":14005,"mtime":1606877604691,"results":"7","hashOfConfig":"6"},{"size":500,"mtime":1606239880738,"results":"8","hashOfConfig":"6"},{"size":1377,"mtime":1606246971686,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"osc6g5",{"filePath":"12","messages":"13","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/home/audstanley/Fall 2020/webCourse/covid/covid-app/src/reportWebVitals.js",[],"/home/audstanley/Fall 2020/webCourse/covid/covid-app/src/App.js",["20","21","22","23","24","25"],"import React, { useReducer, useRef, useLayoutEffect, useState, useEffect } from \"react\";\nimport ReactMarkdown from 'react-markdown';\nimport clsx from 'clsx';\nimport axios from 'axios';\nimport usStates from \"./usStates\";\nimport {  AppBar, \n          Toolbar, \n          IconButton,\n          Typography } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport HomeIcon from '@material-ui/icons/Home';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\n\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport LocationSearchingIcon from '@material-ui/icons/LocationSearching';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n\nam4core.useTheme(am4themes_animated);\nam4core.options.autoDispose = true;\n\nconst useStyles = makeStyles({\n  root: {\n    border: 0,\n    borderRadius: 2,\n    height: 30,\n    // padding: '0 10px',\n    marginTop: \"5px\",\n    padding: '0px 5px 0px 5px',\n  },\n  icon: {\n    padding: '0px 0px 0px 0px',\n    border: '0px 0px 0px 0px'\n  },\n  navDisplayFlex: {\n    display: `flex`,\n    justifyContent: `space-between`\n  },\n  linkText: {\n    textDecoration: `none`,\n    textTransform: `uppercase`,\n    color: `white`\n  },\n  drawer: {\n    width: \"180px\"\n  },\n  content: {\n    marginLeft: \"240px\"\n  }\n});\n\nfunction PositivityChart(props) {\n  const chart = useRef(null);\n  \n  //let [data, setData] = useState([]);\n  console.log('PositivityChart running...')\n  if(props && props.props && chart && chart.current) {\n    console.log('ok..');\n    let x = am4core.create(\"chartdiv\", am4charts.XYChart);\n    x.data = props.props;\n    x.paddingRight = 40;\n\n    let dateAxis = x.xAxes.push(new am4charts.DateAxis());\n    dateAxis.renderer.grid.template.location = 0;\n\n    let valueAxis = x.yAxes.push(new am4charts.ValueAxis());\n    valueAxis.tooltip.disabled = true;\n    valueAxis.renderer.minWidth = 35;\n\n    let series = x.series.push(new am4charts.LineSeries());\n    series.dataFields.dateX = \"date\";\n    series.dataFields.valueY = \"value\";\n\n    series.tooltipText = \"{valueY.value}\";\n    x.cursor = new am4charts.XYCursor();\n\n    let scrollbarX = new am4charts.XYChartScrollbar();\n    scrollbarX.series.push(series);\n    x.scrollbarX = scrollbarX;\n\n    chart.current = x;\n  }\n  //console.log(`props: ${JSON.stringify(props)}`);\n  \n  useEffect(() => {\n    let x = am4core.create(\"chartdiv\", am4charts.XYChart);\n    \n    if(props && props.props ) {\n      x.data = props.props;\n      x.paddingRight = 40;\n\n      //console.log(`xData: ${x.data}`);\n      let dateAxis = x.xAxes.push(new am4charts.DateAxis());\n      dateAxis.renderer.grid.template.location = 0;\n\n      let valueAxis = x.yAxes.push(new am4charts.ValueAxis());\n      valueAxis.tooltip.disabled = true;\n      valueAxis.renderer.minWidth = 35;\n\n      let series = x.series.push(new am4charts.LineSeries());\n      series.dataFields.dateX = \"date\";\n      series.dataFields.valueY = \"value\";\n\n      series.tooltipText = \"{valueY.value}\";\n      x.cursor = new am4charts.XYCursor();\n\n      let scrollbarX = new am4charts.XYChartScrollbar();\n      scrollbarX.series.push(series);\n      x.scrollbarX = scrollbarX;\n\n      chart.current = x;\n    }\n    return () => {\n      chart.current && chart.current.dispose();\n      x.dispose();\n    };\n  }, []);\n\n  return (\n    <div id=\"chartdiv\" style={{ width: \"100%\", height: \"500px\" }}></div>\n  );\n}\n\nfunction DeathChart(props) {\n  const chart = useRef(null);\n  \n  //let [data, setData] = useState([]);\n  console.log('DeathChart running...')\n  if(props && props.props && chart && chart.current) {\n    console.log('ok..');\n    let x = am4core.create(\"chartdiv2\", am4charts.XYChart);\n    x.data = props.props;\n    x.paddingRight = 40;\n\n    let dateAxis = x.xAxes.push(new am4charts.DateAxis());\n    dateAxis.renderer.grid.template.location = 0;\n\n    let valueAxis = x.yAxes.push(new am4charts.ValueAxis());\n    valueAxis.tooltip.disabled = true;\n    valueAxis.renderer.minWidth = 35;\n\n    let series = x.series.push(new am4charts.LineSeries());\n    series.dataFields.dateX = \"date\";\n    series.dataFields.valueY = \"value\";\n\n    series.tooltipText = \"{valueY.value}\";\n    x.cursor = new am4charts.XYCursor();\n\n    let scrollbarX = new am4charts.XYChartScrollbar();\n    scrollbarX.series.push(series);\n    x.scrollbarX = scrollbarX;\n\n    chart.current = x;\n  }\n  //console.log(`props: ${JSON.stringify(props)}`);\n  \n  useEffect(() => {\n    let x = am4core.create(\"chartdiv2\", am4charts.XYChart);\n    \n    if(props && props.props ) {\n      x.data = props.props;\n      x.paddingRight = 40;\n\n      //console.log(`xData: ${x.data}`);\n      let dateAxis = x.xAxes.push(new am4charts.DateAxis());\n      dateAxis.renderer.grid.template.location = 0;\n\n      let valueAxis = x.yAxes.push(new am4charts.ValueAxis());\n      valueAxis.tooltip.disabled = true;\n      valueAxis.renderer.minWidth = 35;\n\n      let series = x.series.push(new am4charts.LineSeries());\n      series.dataFields.dateX = \"date\";\n      series.dataFields.valueY = \"value\";\n\n      series.tooltipText = \"{valueY.value}\";\n      x.cursor = new am4charts.XYCursor();\n\n      let scrollbarX = new am4charts.XYChartScrollbar();\n      scrollbarX.series.push(series);\n      x.scrollbarX = scrollbarX;\n\n      chart.current = x;\n    }\n    return () => {\n      chart.current && chart.current.dispose();\n      x.dispose();\n    };\n  }, []);\n\n  return (\n    <div id=\"chartdiv2\" style={{ width: \"100%\", height: \"500px\" }}></div>\n  );\n}\n\nfunction ICUChart(props) {\n  const chart = useRef(null);\n  \n  //let [data, setData] = useState([]);\n  console.log('DeathChart running...')\n  if(props && props.props && chart && chart.current) {\n    console.log('ok..');\n    let x = am4core.create(\"chartdiv3\", am4charts.XYChart);\n    x.data = props.props;\n    x.paddingRight = 40;\n\n    let dateAxis = x.xAxes.push(new am4charts.DateAxis());\n    dateAxis.renderer.grid.template.location = 0;\n\n    let valueAxis = x.yAxes.push(new am4charts.ValueAxis());\n    valueAxis.tooltip.disabled = true;\n    valueAxis.renderer.minWidth = 35;\n\n    let series = x.series.push(new am4charts.LineSeries());\n    series.dataFields.dateX = \"date\";\n    series.dataFields.valueY = \"value\";\n\n    series.tooltipText = \"{valueY.value}\";\n    x.cursor = new am4charts.XYCursor();\n\n    let scrollbarX = new am4charts.XYChartScrollbar();\n    scrollbarX.series.push(series);\n    x.scrollbarX = scrollbarX;\n\n    chart.current = x;\n  }\n  //console.log(`props: ${JSON.stringify(props)}`);\n  \n  useEffect(() => {\n    let x = am4core.create(\"chartdiv3\", am4charts.XYChart);\n    \n    if(props && props.props ) {\n      x.data = props.props;\n      x.paddingRight = 40;\n\n      //console.log(`xData: ${x.data}`);\n      let dateAxis = x.xAxes.push(new am4charts.DateAxis());\n      dateAxis.renderer.grid.template.location = 0;\n\n      let valueAxis = x.yAxes.push(new am4charts.ValueAxis());\n      valueAxis.tooltip.disabled = true;\n      valueAxis.renderer.minWidth = 35;\n\n      let series = x.series.push(new am4charts.LineSeries());\n      series.dataFields.dateX = \"date\";\n      series.dataFields.valueY = \"value\";\n\n      series.tooltipText = \"{valueY.value}\";\n      x.cursor = new am4charts.XYCursor();\n\n      let scrollbarX = new am4charts.XYChartScrollbar();\n      scrollbarX.series.push(series);\n      x.scrollbarX = scrollbarX;\n\n      chart.current = x;\n    }\n    return () => {\n      chart.current && chart.current.dispose();\n      x.dispose();\n    };\n  }, []);\n\n  return (\n    <div id=\"chartdiv3\" style={{ width: \"100%\", height: \"500px\" }}></div>\n  );\n}\n\nconst renderICUChartData = (ICUChartData) => <div><h2>Currently in ICU:</h2><ICUChart props={ ICUChartData }/> </div>;\n\nfunction App() {\n  const classes = useStyles();\n  const reducer = (state, action) => {\n    switch (action.type) {\n      case \"init\":\n        return { ...state };\n      default:\n        return { ...state };\n    }\n  };\n  let [state, dispatch] = useReducer(reducer, { left: false, req: false, data: [], chartData: [], deathChartData: [], ICUChartData: [], notes: \"\", link: \"Home\", currentState: \"\" });\n\n  if(!state.req) {\n    state.req = true;\n    axios.get('https://api.covidtracking.com/v1/states/info.json')\n      .then(data => {\n        state.data = data.data;\n        //console.log(`axios: ${JSON.stringify(data.data, null, 2)}`);\n        dispatch(state, { type: \"init\" });\n      });\n  }\n  \n  const toggleDrawer = (anchor, open) => (event) => {\n    console.log(`EVENT: ${event}`);\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n      return;\n    }\n    dispatch(state);\n  };\n\n  {/* renderData will extract ignore the event, but use the USA - state - to make changes to the Base UI component */}\n  const renderData = (unitedState) => (event) => {\n    let chartData = [];\n    let deathChartData = [];\n    let ICUChartData = [];\n    state.chartData = [];\n    state.deathChartData = [];\n    state.ICUChartData = [];\n    //console.log(`onClick: ${usStates[unitedState]}`);\n    //let d = state.data;\n    state.link = unitedState;\n    let NotesObj = state.data.filter(e => e.state === usStates[unitedState])[0];\n    state.currentState = NotesObj.state;\n    //console.log(state);\n    state.notes = NotesObj.notes;\n    axios.get(`https://api.covidtracking.com/v1/states/${usStates[unitedState]}/daily.json`)\n      .then(USStateData => {\n        //console.log(JSON.stringify(USStateData,null,2));\n        \n        for(let i = 0; i < USStateData.data.length; i++) {\n          chartData.push({ date: USStateData.data[i].dateChecked, name: `name-${i}`, value: USStateData.data[i].positive })\n          deathChartData.push({ date: USStateData.data[i].dateChecked, name: `name-${i}`, value: USStateData.data[i].death })\n          ICUChartData.push({ date: USStateData.data[i].dateChecked, name: `name-${i}`, value: USStateData.data[i].inIcuCurrently })\n        }\n        //state.chartData = USStateData.data.map((e, i) => { return { date: e.dateChecked, name: `name-${i}`, value: e.positive }; })\n        state.chartData = chartData.filter(e => e.date !== null);\n        state.deathChartData = deathChartData.filter(e => e.date !== null);\n        state.ICUChartData = ICUChartData.filter(e => e.date !== null && e.value !== null);\n        console.log(JSON.stringify(state.ICUChartData,null,2));\n        //console.log(`${usStates[unitedState]}: ${JSON.stringify(USStateData,null,2)}`);\n        //console.log(`state: ${JSON.stringify(state.chartData,null,2)}`);\n        dispatch(state);\n      })\n    \n  }\n  const homePage = () => () => {\n    state.link = \"Home\";\n    dispatch(state);\n  }\n  \n  const list = (anchor) => (\n    <div\n      className={clsx(classes.list)}\n      role=\"presentation\"\n    >\n      <List>\n        {['Home'].map((text) => (\n          <ListItem button dense key={text} onClick={homePage(text)} className={classes.root}>\n            <ListItemIcon className={classes.icon}>\n              <HomeIcon style={{ color: \"blue\", fontSize: \"1rem\" }}/>\n            </ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))}\n      </List>\n      <Divider />\n      <List>\n\n        {/* This is the list of states on the left drawer */}\n          {Object.keys(usStates).map((text, index) => (\n            <ListItem button dense \n                key={text} \n                onClick={renderData(text)}\n                className={classes.root}\n            >\n              <ListItemIcon className={classes.icon}>\n                <LocationSearchingIcon style={{ color: \"blue\", fontSize: \"1rem\" }} />\n              </ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n          ))}\n      </List>\n    </div>\n  );\n\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <React.Fragment key=\"left\">\n              <MenuIcon onClick={toggleDrawer(\"left\", true)} />\n              <div className={classes.drawer}>\n                <Drawer variant=\"permanent\" anchor=\"left\" open={state[\"left\"]} onClose={toggleDrawer(\"left\", false)}>\n                  {list(\"left\")}\n                </Drawer>\n              </div>\n            </React.Fragment> \n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            United States Covid API\n          </Typography>\n          {/* <Button color=\"inherit\">Login</Button> */}\n        </Toolbar>\n      </AppBar>\n\n      {( (state.req)? console.log(`BLERP: ${state.currentState}`) : '' )}\n\n      <div className={classes.content}>\n        {/* { Object.keys(usStates).join(\" \") } */}\n      </div>\n\n      {/* Render the home page until click dispatch */}\n      {\n        (state.link === \"Home\")?\n        <div className={classes.content}>\n          <h1>\n            Home\n          </h1>\n        </div>\n        :\n        (state.currentState)?\n          <div className={ classes.content }>\n            <h1>\n            { state.link }\n            </h1>\n              <h2>\n                Positivity Rate:\n              </h2>\n              <PositivityChart props={ state.chartData }/>\n              <h2>\n                Death Rate:\n              </h2>\n              <DeathChart props={ state.deathChartData }/>\n              \n              {\n                (state.ICUChartData.length > 10)?\n                 renderICUChartData(state.ICUChartData)\n                :\n                  \"\"\n              }\n              \n            <h2>\n              Notes:\n            </h2>\n              <ReactMarkdown>{ state.notes }</ReactMarkdown>\n          </div>\n          :\n          \"\"\n      }\n      \n    </div>\n  );\n}\n\nexport default App;\n","/home/audstanley/Fall 2020/webCourse/covid/covid-app/src/index.js",[],"/home/audstanley/Fall 2020/webCourse/covid/covid-app/src/usStates.js",["26"],"export default \n{   \"Alaska\" : \"AK\",\n    \"Alabama\" : \"AL\",\n    \"Arkansas\" : \"AR\",\n    \"American Samoa\" : \"AS\", \n    \"Arizona\" : \"AZ\", \n    \"California\" : \"CA\", \n    \"Colorado\" : \"CO\", \n    \"Connecticut\" : \"CT\", \n    \"District of Columbia\" : \"DC\", \n    \"Delaware\" : \"DE\", \n    \"Florida\" : \"FL\", \n    \"Georgia\" : \"GA\", \n    \"Guam\" : \"GU\", \n    \"Hawaii\" : \"HI\", \n    \"Iowa\" : \"IA\", \n    \"Idaho\" : \"ID\", \n    \"Illinois\" : \"IL\", \n    \"Indiana\" : \"IN\", \n    \"Kansas\" : \"KS\", \n    \"Kentucky\" : \"KY\", \n    \"Louisiana\" : \"LA\", \n    \"Massachusetts\" : \"MA\", \n    \"Maryland\" : \"MD\", \n    \"Maine\" : \"ME\", \n    \"Michigan\" : \"MI\", \n    \"Minnesota\" : \"MN\", \n    \"Missouri\" : \"MO\", \n    \"Mississippi\" : \"MS\", \n    \"Montana\" : \"MT\", \n    \"North Carolina\" : \"NC\", \n    \"North Dakota\" : \"ND\", \n    \"Nebraska\" : \"NE\", \n    \"New Hampshire\" : \"NH\", \n    \"New Jersey\" : \"NJ\", \n    \"New Mexico\" : \"NM\", \n    \"Nevada\" : \"NV\", \n    \"New York\" : \"NY\", \n    \"Ohio\" : \"OH\", \n    \"Oklahoma\" : \"OK\", \n    \"Oregon\" : \"OR\", \n    \"Pennsylvania\" : \"PA\", \n    \"Puerto Rico\" : \"PR\", \n    \"Rhode Island\" : \"RI\", \n    \"South Carolina\" : \"SC\", \n    \"South Dakota\" : \"SD\", \n    \"Tennessee\" : \"TN\", \n    \"Texas\" : \"TX\", \n    \"Utah\" : \"UT\", \n    \"Virginia\" : \"VA\", \n    \"Virgin Islands\" : \"VI\", \n    \"Vermont\" : \"VT\", \n    \"Washington\" : \"WA\", \n    \"Wisconsin\" : \"WI\", \n    \"West Virginia\" : \"WV\", \n    \"Wyoming\" : \"WY\"\n}",{"ruleId":"27","severity":1,"message":"28","line":1,"column":37,"nodeType":"29","messageId":"30","endLine":1,"endColumn":52},{"ruleId":"27","severity":1,"message":"31","line":1,"column":54,"nodeType":"29","messageId":"30","endLine":1,"endColumn":62},{"ruleId":"32","severity":1,"message":"33","line":123,"column":6,"nodeType":"34","endLine":123,"endColumn":8,"suggestions":"35"},{"ruleId":"32","severity":1,"message":"33","line":195,"column":6,"nodeType":"34","endLine":195,"endColumn":8,"suggestions":"36"},{"ruleId":"32","severity":1,"message":"33","line":267,"column":6,"nodeType":"34","endLine":267,"endColumn":8,"suggestions":"37"},{"ruleId":"38","severity":1,"message":"39","line":306,"column":3,"nodeType":"40","messageId":"41","endLine":306,"endColumn":119},{"ruleId":"42","severity":1,"message":"43","line":1,"column":1,"nodeType":"44","endLine":57,"endColumn":2},"no-unused-vars","'useLayoutEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.","ArrayExpression",["45"],["46"],["47"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",{"desc":"48","fix":"49"},{"desc":"48","fix":"50"},{"desc":"48","fix":"51"},"Update the dependencies array to be: [props]",{"range":"52","text":"53"},{"range":"54","text":"53"},{"range":"55","text":"53"},[3621,3623],"[props]",[5695,5697],[7768,7770]]